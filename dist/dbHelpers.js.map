{"version":3,"sources":["../service/dbHelpers.js"],"names":["dbHelpers","db","initDB","sqlite3","Database","err","console","log","Promise","resolve","reject","close","serialize","run","stmt","prepare","i","Math","trunc","Date","now","finalize","data","temp","temperature","collect_time","oxy","pulse","spo2","gluc","mg_dl","mmol_l","bp","diastolic","systolic","weight","bmi","bodyfat","temps","Array","response","each","row","push"],"mappings":"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","file":"dbHelpers.js","sourcesContent":["import sqlite3 from 'sqlite3';\n\n\nexport class dbHelpers{\n    \n    constructor(){\n        this.db = this.initDB();\n    }\n\n    initDB() {\n        const db = new sqlite3.Database('./../sensordata.db',(err)=>{\n        if(err){\n            console.log('error connecting to sqlite:',err)\n        }\n        });\n        return db;\n    }\n\n    closeDB(){\n        return new new Promise((resolve, reject) => { \n            this.db.close(err=>{\n            if(err) {\n                reject('Error closing database connection: '+err)\n            } else {\n                resolve()\n            }});\n        })\n    }\n\n    initTables(){\n        this.db.serialize(() => {\n            this.db.run(`DROP TABLE temperature_readings`)\n            this.db.run(`DROP TABLE bloodpressure_readings`)\n            this.db.run(`DROP TABLE glucose_readings`)\n            this.db.run(`DROP TABLE oxygen_readings`)\n            this.db.run(`DROP TABLE weight_readings`)\n            console.log('deleted all tables');\n            this.db.run(`CREATE TABLE IF NOT EXISTS temperature_readings\n                    (temperature REAL,collect_time DATETIME);`);\n            this.db.run(`CREATE TABLE IF NOT EXISTS bloodpressure_readings\n                    (diastolic REAL, pulse REAL, systolic REAL,\n                    collect_time DATETIME);`);\n            this.db.run(`CREATE TABLE IF NOT EXISTS glucose_readings\n                    (mg_dl REAL,mmol_l REAL,\n                    collect_time DATETIME);`);\n            this.db.run(`CREATE TABLE IF NOT EXISTS oxygen_readings\n                    (pulse REAL,spo2 REAL,\n                    collect_time DATETIME);`);\n            this.db.run(`CREATE TABLE IF NOT EXISTS weight_readings\n                    (bmi REAL,bodyfat REAL,weight REAL,\n                    collect_time DATETIME);`);        \n          });\n          console.log('created all tables');\n          var stmt = this.db.prepare(\"INSERT INTO temperature_readings VALUES (?,?)\");\n          for (var i = 0; i < 10; i++) {\n              stmt.run(25+i,Math.trunc(Date.now()/1000));\n          }\n          stmt.finalize();   \n    }\n\n    insertTemp(data){\n        return new Promise((resolve,reject)=>{\n            this.db.serialize(() => {\n            const temp = this.db.prepare(\"INSERT INTO temperature_readings VALUES (?,?)\");\n            temp.run(data.temperature,data.collect_time);\n            temp.finalize((err)=>{\n                if(err) reject('Error: ' + err)\n                else resolve(\"success !\")\n            });\n            });\n        })      \n    }\n    \n    insertOxy(data){\n        return new Promise((resolve,reject)=>{\n            this.db.serialize(() => {\n            const oxy = this.db.prepare(\"INSERT INTO oxygen_readings VALUES (?,?,?)\");\n            oxy.run(data.pulse,data.spo2,data.collect_time);\n            oxy.finalize((err)=>{\n                if(err) reject('Error: ' + err)\n                else resolve()\n            });\n            });\n        })      \n    }\n    \n    insertGluc(data){\n        return new Promise((resolve,reject)=>{\n            this.db.serialize(() => {\n            const gluc = this.db.prepare(\"INSERT INTO glucose_readings VALUES (?,?,?)\");\n            gluc.run(data.mg_dl,data.mmol_l,data.collect_time);\n            gluc.finalize((err)=>{\n                if(err) reject('Error: ' + err)\n                else resolve()\n            });\n            });\n        })      \n    }\n    \n\n    insertBP(data){\n        return new Promise((resolve,reject)=>{\n            this.db.serialize(() => {\n            const bp = this.db.prepare(\"INSERT INTO bloodpressure_readings VALUES (?,?,?,?)\");\n            bp.run(data.diastolic,data.pulse,data.systolic,data.collect_time);\n            bp.finalize((err)=>{\n                if(err) reject('Error: ' + err)\n                else resolve()\n            });\n            });\n        })      \n    }\n    \n    insertWeight(data){\n        return new Promise((resolve,reject)=>{\n            this.db.serialize(() => {\n            const weight = this.db.prepare(\"INSERT INTO weight_readings VALUES (?,?,?,?)\");\n            weight.run(data.bmi,data.bodyfat,data.weight,data.collect_time);\n            weight.finalize((err)=>{\n                if(err) reject('Error: ' + err)\n                else resolve()\n            });\n            });\n        })      \n    }\n    \n    fetchFromDB(){\n        return new Promise((resolve,reject)=>{\n                \n                this.db.serialize(()=>{\n                    let temps=new Array();\n                    let oxy=new Array();\n                    let gluc=new Array();\n                    let bp=new Array();\n                    let weight=new Array();\n                    let response=new Array();\n                    \n                    this.db.each(\"SELECT * FROM temperature_readings ORDER BY collect_time ASC ;\",function(err, row) {\n                        if(err){\n                            reject('Error querying temp:'+err);\n                        }\n                        temps.push(row)\n                    },()=>{\n                        response['temperature']=temps;\n                    });\n                    this.db.each(\"SELECT * FROM glucose_readings ORDER BY collect_time ASC ;\",function(err, row) {\n                        if(err){\n                            reject('Error querying glucose:'+err);\n                        }\n                        gluc.push(row)\n                    },()=>{\n                        response['glucose']=gluc;\n                    });\n                    this.db.each(\"SELECT * FROM oxygen_readings ORDER BY collect_time ASC ;\",function(err, row) {\n                        if(err){\n                            reject('Error querying oxygen: '+err);\n                        }\n                        oxy.push(row)\n                    },()=>{\n                        response['oxygen']=oxy;\n                    });\n                    this.db.each(\"SELECT * FROM bloodpressure_readings ORDER BY collect_time ASC ;\",function(err, row) {\n                        if(err){\n                            reject('Error querying bp: '+err);\n                        }\n                        bp.push(row)\n                    },()=>{\n                        response['bp']=bp;\n                    });\n\n                    this.db.each(\"SELECT * FROM weight_readings ORDER BY collect_time ASC ;\",function(err, row) {\n                        if(err){\n                            reject('Error querying weight: '+err);\n                        }\n                        weight.push(row)\n                    },()=>{\n                        response['weight']=weight;            \n                        resolve(response);\n                    });\n                });    \n        })       \n    }\n\n    DeleteAll(){\n        return new Promise((resolve, reject) => {\n          this.db.serialize(()=>{\n              this.db.run(`DELETE FROM temperature_readings;`,err => {\n                    if(err){\n                        reject(\"Error deleting records: \"+err);\n                    }\n              })\n              this.db.run(`DELETE FROM glucose_readings;`,err => {\n                        if(err){\n                            reject(\"Error deleting records: \"+err);\n                        }\n              })\n              this.db.run(`DELETE FROM bloodpressure_readings;`,err => {\n                    if(err){\n                    reject(\"Error deleting records: \"+err);\n                }\n              })\n              this.db.run(`DELETE FROM oxygen_readings;`,err => {\n                    if(err){\n                        reject(\"Error deleting records: \"+err);\n                    }\n              })\n              this.db.run(`DELETE FROM weight_readings;`,err => {\n                if(err){\n                    reject(\"Error deleting records: \"+err);\n                }\n              })\n              resolve();\n          })\n        })\n    }\n}\n\n\n\n\n    \n"]}