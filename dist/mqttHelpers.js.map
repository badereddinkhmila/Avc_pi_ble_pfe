{"version":3,"sources":["../service/mqttHelpers.js"],"names":["mqttHelpers","clientId","Url","broker","initBroker","mqtt_options","keepalive","clean","reconnectPeriod","connectTimeout","client","mqtt","connect","console","log","connected","e","db","dbHelpers","fetchFromDB","then","temp_len","data","temperature","length","glu_len","glucose","bp_len","bp","oxy_len","oxygen","weight_len","weight","i","sendTemperature","sendGlucose","sendOxygen","sendBP","sendWeight","DeleteAll","Promise","resolve","reject","msg","collect_time","publish","JSON","stringify","mg_dl","mmol_l","pulse","spo2","diastolic","systolic","bmi","bodyfat"],"mappings":"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","file":"mqttHelpers.js","sourcesContent":["import mqtt from 'mqtt' ;\nimport { dbHelpers } from './dbHelpers'; \n\nexport class mqttHelpers{\n    \n    constructor(clientId,Url){\n        this.clientId=clientId;\n        this.Url=Url;\n        this.broker = this.initBroker();\n    }\n\n    initBroker() {\n        const mqtt_options = {\n            keepalive: 3600,\n            clientId: this.clientId,\n            clean: true,\n            reconnectPeriod: 1000,\n            connectTimeout: 30 * 1000,\n        }     \n        try{    \n            const client = mqtt.connect(this.Url, mqtt_options)\n            console.log('mqtt broker connection state',client.connected);\n            return client;\n        }catch(e){\n            console.log('unable to connect')\n        }\n    }\n\n    checkDB() {\n        const db = new dbHelpers();\n        db.fetchFromDB().then( data =>{\n            const temp_len=data.temperature.length\n            const glu_len=data.glucose.length\n            const bp_len=data.bp.length\n            const oxy_len=data.oxygen\n            const weight_len=data.weight.length\n\n            if(temp_len !==0){ \n                for(let i=0; i< temp_len ;i++){\n                    this.sendTemperature((data.temperature)[i])\n                    console.log((data.temperature)[i])\n                }\n            }\n\n            else if(glu_len !==0){\n                for(let i=0; i< glu_len ;i++){\n                    this.sendGlucose((data.glucose)[i])\n                }\n            }\n\n            else if( oxy_len !==0 ){\n                for(let i=0; i< oxy_len ;i++){\n                    this.sendOxygen((data.oxygen)[i])\n                }\n            }\n            else if(bp_len !==0) {\n                for(let i=0; i< bp_len ;i++){\n                    this.sendBP((data.bp)[i])\n                }\n            }\n\n            else if(weight_len !==0){\n                for(let i=0; i< weight_len ;i++){\n                    this.sendWeight((data.weight)[i])\n                }\n            }\n            db.DeleteAll()    \n        })\n    }\n\n\n    sendTemperature(data){\n        return new Promise((resolve,reject)=>{\n            try{    const msg={'gateway_id':this.clientId,'collect_time':data.collect_time,'temperature':data.temperature}\n                    console.log(msg);\n                try{\n                    this.broker.publish('avc/temperature',JSON.stringify(msg))\n                    console.log('successfully sent temperature message');\n                    resolve()\n                }catch(e){\n                    reject(e);\n                }\n            }catch(e){\n                reject(e);\n            }\n        })\n    }\n\n    sendGlucose(data){\n        return new Promise((resolve,reject)=>{\n            try{    msg={'gateway_id':this.clientId,'collect_time':data.collect_time,\n                    'mg_dl':data.mg_dl,'mmol_l':data.mmol_l}\n                try{\n                    this.broker.publish('avc/glucose', JSON.stringify(msg))\n                    resolve()\n                }catch(e){\n                    reject(e);\n                }\n            }catch(e){\n                reject(e);\n            }\n        })\n    }\n\n    sendOxygen(data){\n        return new Promise((resolve,reject)=>{\n            try{    msg={'gateway_id':this.clientId,'collect_time':data.collect_time,\n                    'pulse':data.pulse,'spo2':data.spo2}\n                try{\n                    this.broker.publish('avc/oxygen',JSON.stringify(msg))\n                    resolve()\n                }catch(e){\n                    reject(e);\n                }\n            }catch(e){\n                reject(e);\n            }\n        })\n    }\n    \n    sendBP(data){\n        return new Promise((resolve,reject)=>{\n            try{    msg={'gateway_id':this.clientId,'collect_time':data.collect_time,'diastolic':data.diastolic,'pulse':data.pulse,'systolic':data.systolic}\n                try{\n                    this.broker.publish('avc/bloodpressure',JSON.stringify(msg))\n                    resolve()\n                }catch(e){\n                    reject(e);\n                }\n            }catch(e){\n                reject(e);\n            }\n        })\n    }\n\n    sendWeight(data){\n        return new Promise((resolve,reject)=>{\n            try{msg={'gateway_id':this.clientId,'collect_time':data.collect_time,\n                    'bmi':data.bmi,'bodyfat':data.bodyfat,'weight':data.weight}\n                try{\n                    this.broker.publish('avc/weight',JSON.stringify(msg))\n                    resolve()\n                }catch(e){\n                    reject(e);\n                }\n            }catch(e){\n                reject(e);\n            }\n        })\n    }\n}"]}