{"version":3,"sources":["../service/app.js"],"names":["clientId","connectUrl","dbhelper","dbHelpers","initTables","mqtthelper","mqttHelpers","broker","on","checkDB","console","log","noble","state","startScanning","devices","device","localName","advertisement","serviceData","serviceUuids","indexOf","address","undefined","push","discoverAllServicesAndCharacteristics","error","services","characteristics","forEach","service","chId","uuid","heart","temp","bp","ch","name","properties","includes","subscribe","data","isNotification","toJSON","my_data","time","Math","trunc","Date","now","msg","connected","sendBP","insertBP","then","resp","value","random","toFixed","sendTemperature","insertTemp","connect","pop"],"mappings":"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","file":"app.js","sourcesContent":["import noble from 'noble';\nimport { dbHelpers } from './dbHelpers';\nimport { mqttHelpers } from './mqttHelpers';\n\nconst clientId = 'Yassine_Gateway_RBP_3B+';\nconst connectUrl = 'tcp://192.168.1.232:1883/mqtt';\n//const connectUrl = 'tcp://192.168.1.13:1883/mqtt'\n\n\nconst dbhelper = new dbHelpers();\ndbhelper.initTables();\n\nconst mqtthelper=new mqttHelpers(clientId,connectUrl);\n\nmqtthelper.broker.on(\"connect\", function () {\n    mqtthelper.checkDB()\n});\n\nmqtthelper.broker.on(\"reconnect\", function () {\n    console.log('reconnecting to mqtt...')\n});\n\nnoble.on('stateChange', (state) => {\n    if (state === 'poweredOn') {\n        console.log('Powered On');\n        noble.startScanning([], true);\n    }\n});\n\nnoble.on('scanStart', () => {\n    console.log('scan start');\n})\n\nnoble.on('scanStop', () => {\n    console.log('scan stopped');\n})\n\nlet devices=[]\n\nnoble.on('discover', (device) => {\n    let localName = device.advertisement.localName;\n    console.log(device.advertisement.serviceData,device.advertisement.serviceUuids)\n    console.log(devices.indexOf(device.advertisement.localName))\n    console.log('discovered: ', device.address);\n    if (localName !== undefined && localName !== \"\"){\n        device.on('connect',()=>{\n            console.log('connected to',device.address)\n            devices.push(device.address)\n            device.discoverAllServicesAndCharacteristics((error,services,characteristics)=>{\n                services.forEach((service,chId)=>{\n                    console.log('Uuid:'+service.uuid)    \n                })\n                let heart=null;\n                let temp=null;\n                let bp = null;\n                characteristics.forEach((ch,chId)=>{\n                    console.log('Uuid:'+ch.uuid,'Name:'+ch.name,'Properties:'+ch.properties)\n                    if(ch.name!==null && ch.name.includes(\"Heart Rate Meas\")){\n                        //heart=ch  \n                    }\n                    if(ch.name!==null && ch.name.includes(\"Temperature Measurement\")){\n                        console.log('subscribed to temperature service');\n                        temp=ch  \n                    }\n                    \n                    if(ch.name!==null && ch.name.includes(\"Blood Pressure Measurement\")){\n                        console.log('subscribed to blood pressure service');\n                        bp=ch\n                    }\n                })\n                if(heart !== null ){\n                console.log('type: ',heart.name)\n                heart.subscribe((error)=>{\n                    console.log('in subs')\n                    if(error){console.log('my error: ',error)}\n                })\n                heart.on('data',(data,isNotification)=>{\n                    //let mydata=Buffer.from(data)\n                    console.log((data.toJSON())['data']) \n                })\n                }\n                if(bp !== null ){\n                bp.subscribe((error)=>{\n                    console.log('in subs')\n                    if(error){console.log('my error: ',error)}\n                })\n                bp.on('data',(data,isNotification)=>{\n                    console.log(data)\n                    let my_data=(data.toJSON())['data']\n                    let time=Math.trunc(Date.now()/1000)\n                    let msg = {'diastolic': my_data[1],'pulse': my_data[14],\n                        'systolic': my_data[3],'collect_time': time};\n                    if(mqtthelper.broker.connected)\n                    {\n                        console.log('Sendig through the broker');\n                        mqtthelper.sendBP(msg)\n                    }\n                    else{\n                        console.log('Falling to sqlite3 local storage')\n                        dbhelper.insertBP(msg)\n                        .then(resp=>{console.log(resp);})\n                    } \n                })\n                }\n                if(temp !== null ){\n                    console.log('type: ',temp.name)\n                    temp.subscribe((error)=>{\n                        if(error){console.log('my error:',error)}\n                    })\n                    temp.on('data',(data,isNotification)=>{\n                        console.log(data)\n                        let value=(37 + (Math.random())).toFixed(2)\n                        let time=Math.trunc(Date.now()/1000)\n                        let msg={'temperature':value,'collect_time':time};\n                        if(mqtthelper.broker.connected)\n                        {\n                            console.log('Sendig through the broker');\n                            mqtthelper.sendTemperature(msg)\n                        }\n                        else{\n                            console.log('Falling to sqlite3 local storage')\n                            dbhelper.insertTemp(msg)\n                            .then(resp=>{console.log(resp);})\n                        }\n                        })\n                    }\n            })\n        })\n\n        if(devices.indexOf(device.address) == -1 ){\n            device.connect((error)=>{\n                if (error) {\n                    console.log(error)\n                }\n            console.log(device.address,'connected!!')\n            noble.startScanning();\n        })\n        device.on('disconnect',(error)=>{\n            if(error) console.log(error);\n                devices.pop(device.address)\n        })\n    }\n    }\n})\n"]}